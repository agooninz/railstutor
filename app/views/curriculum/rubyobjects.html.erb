<% content_for :head do %>
  <title>Ruby Objects</title>
<% end %>

<%=  render "layouts/breadcrumbs" %>

<div class="row" id="main">
  <div class=" large-12 large-centered columns panel">
    <h1 class="centered">
      Ruby Objects
    </h1>
    <h2>
      Strategic Learning Goals
    </h2>

    <div class="row">
      <div class=" large-11 large-centered columns">
        <ol>
          <li>Understand how to create build and manipulate Ruby Objects.</li>
        </ol>
        <iframe src="//player.vimeo.com/video/79154085" class="tutorvid" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
      </div>
    </div>

    <h2>
      Tactical Learning Goals
    </h2>
    <blockquote>
      'It's called the tactical turtle-neck, I invented it!' - @codenameduchess
    </blockquote>
    <div class="row">
      <div class=" large-11 large-centered columns">
        <ul>
          <li>Build a series of ruby objects</li>
        </ul>
        <pre><code>
          class Room
            attr_reader :color, :style, :windows
            attr_writer :color, :style, :windows

            def initialize
              @color = nil
              @style = nil
              @windows = nil
            end

            def paint(color)
              @color = color
            end

            def create(style, windows)
              @style = style
              @windows = windows
            end

            def complete?
              if @style == "corner" && @windows == 2
                return true
              elsif @style == "regular" && @windows == 1
                return true
              else
                return false
              end
            end
          end

          class Floor 
            attr_accessor :rooms, :capacity

            def initialize(capacity = nil)
              @rooms = []
              @capacity = capacity 
            end

            def complete?
              return unless @capacity
              if @rooms.length == @capacity
                return true
              else
                return false
              end
            end

            def inspect_room(room)
              if room.complete?
                @rooms.push room
                return @rooms
              else
                return nil
              end
            end
          end

          class Building
            attr_accessor :floors, :height
            def initialize(height = nil)
              @floors = []
              @height = height
            end

            def built?
              return unless @height
              if @floors.count == @height
                return true
              else
                return false
              end
            end

            def add_floor(floor)
              if floor.complete?
                @floors.push floor
                return @floors
              else
                return nil
              end
            end
          end
        </code></pre>
      </div>
    </div>
  </div>
</div>

