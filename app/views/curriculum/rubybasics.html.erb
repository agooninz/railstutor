<div class="row">
  <div class=" large-12 large-centered columns">
    <h1>
      RubyonRailstutor.com - Ruby Basics, Strings, Hashes, Arrays
    </h1>
  </div>
</div>
<div class="row">
  <div class=" large-12 large-centered columns panel">
    <h2>
      Strategic Learning Goals
    </h2>

    <div class="row">
      <div class=" large-11 large-centered columns">
        <iframe src="//player.vimeo.com/video/78941708" width="500" height="283" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
        <ol>
          <li>Iteration</li>
          <li>Congruency - def 'the quality or state of agreeing or corresponding.'</li>
          <li>"It's All Just Ruby!"</li>
        </ol>
      </div>
    </div>

    <h2>
      ScreenCasts
    </h2>

    <div class="row">
      <div class=" large-11 large-centered columns">
      </div>
    </div>

    <h2>
      Reference Material
    </h2>
    <div class="row">
      <div class=" large-11 large-centered columns">
        <ul>
          <li><%= link_to "Active Record Associations", "http://guides.rubyonrails.org/association_basics.html" %> </li>
        </ul>
      </div>
    </div>

    <h2>
      Tactical Learning Goals
    </h2>
    <blockquote>
      'It's called the tactical turtle-neck, I invented it!' - @codenameduchess
    </blockquote>
    
    <div class="row">
      <div class=" large-11 large-centered columns content">
        <ul>
          <li>Strings and Ruby Basics</li>
          <iframe src="//player.vimeo.com/video/79056946" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> 
          <blockquote>irb vs script.rb</blockquote>
          <blockquote>double spacing and indentation, do it. no questions asked.</blockquote>
          <blockquote>learn to use http://www.ruby-doc.org/core-2.0.0/</blockquote>
          <blockquote>variable instantiation</blockquote>
          <pre><code>
            name = "john"
          </code></pre>
          <blockquote>string manipulation</blockquote>
          <pre><code>
            name = "john".reverse
            p name
            messed_up_name = "j*o*h*n"

            # how to remove ALL the '*' from messed_up_name ?

            p messed_up_name.gsub("*", "")

            #how to find things ? 

            really_messed_up_name = "johnfubardavison"

            # how to find if 'fubar' exists inside really_messed_up_name ? 

            p really_messed_up_name.match("fubar")

          </code></pre>
          <blockquote>string concatination and interpolation</blockquote>
          <pre><code>
            first = "john"
            last = "davison"

            #concatenate
            full_name = first + last
            p full_name
            # why doesn't the '+' try to 'add' the names ? 

            #interporlate
            complete_name = "#{first} #{last}"
            p complete_name
          </code></pre>


          <blockquote>
            defining and invoking functions
          </blockquote>
          <pre><code>
            #wave if your like 'whats a function?' !!!

            def example_method
              name = "john"
              p "my name is #{name}"
            end
          </code></pre>
          <blockquote>
            return values, explicit and implicit
          </blockquote>
          <pre><code>
            def example_method
              name = "sarah"
              p name
              "fred"
            end
            
            #versus

            def example_method2
              name = "sarah"
              p name
              return name
              "fred"
            end

            #what does it mean to 'return' something?
          </code></pre>

          <blockquote>
            passing arguments to functions
          </blockquote>
          <pre><code>
            def do_a_dance(dance1, dance2)
              p dance1
              dance2
            end
          </code></pre>

          <blockquote>
            ruby and parethesis, or lack there of
          </blockquote>
          <pre><code>
            def do_a_dance dance1, dance2 
              p dance1
              dance2
            end
          </code></pre>

          <blockquote>
            what is the difference between 1 and "1"
          </blockquote>
          <pre><code>
            p "1"
            p "1".class
            p 1
            p 1.class
          </code></pre>

          <blockquote>
            if else control flow
          </blockquote>
          <pre><code>
            def make_a_decision_based_on_input(condition)
              if condition == true
                p "the condition was true"
              else
                p "the conditioin was not true"
              end
            end
          </code></pre>

          <blockquote>
            what does nil mean ?
          </blockquote>
          <pre><code>
            p nil
            p nil.class
            p 0/1
            p 1/0
            p [ nil, 1, true, false ]
            p [ nil, 1, true, false ].compact
          </code></pre>

          <blockquote>
          </blockquote>
          <pre><code>
          </code></pre>
        </ol>
      </div>
    </div>

    <div class="row">
      <div class=" large-11 large-centered columns content">
        <ul>
          <li>array manipulation, array traversal</li>
          <iframe src="//player.vimeo.com/video/79059268" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
          <blockquote>
          </blockquote>
          <pre><code>
            names = [ "jim", "john", "erik", "michelle"]

            # how to view the first name ?

            p names[0]
            # arrays are 'zero' index, ie, each name corresponds to an integer

            # starting at 0

            # how to view the last name ?

            p names[-1]

            # whats the difference? 

            p names[3]

            # how to change jim to jake ? 

            names[0] = "jake"
            p names
            
            # how to show the first 2 names ? 

            p names[0..1]

            # what is .. ? 

            # what do the brackets mean when written like names[ ] ?

            # what is the purpose of an array ?
          </code></pre>

          <blockquote>
            use of ruby enumeratives/enumerables
          </blockquote>
          <pre><code>
            names = [ "jim", "john", "erik", "michelle"]
            new_names = names.each do |n|
              p n.reverse
            end

            #will the below print true or false ? (...congruency... woohahaha)

            p names == new_names
            actually_new_names = names.map do |n|
              n.reverse
            end
            p new_names == actually_new_names
            names = [ "john", "john", "erik", "michelle"]
            john = names.select {|name| name == "john"}
            p john
          </code></pre>

          <blockquote>
          </blockquote>
          <pre><code>
          </code></pre>
        </ul>
      </div>
    </div>


    <div class="row">
      <div class=" large-11 large-centered columns content">
        <ul>
          <li>Ruby HASHES</li>

          <iframe src="//player.vimeo.com/video/79061042" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
          <blockquote>
            hash manipulation, hash traversal, symbols, k/v pairs
          </blockquote>
          <pre><code>
            people = { john: "davison", mike: "the mechanic", sally: "fields"}
            p people
            person = { first: "john", last: "davison", first: "john", last: "davison" }
            p person

            # why does "first" only get printed once ? 

            # what is the element ':first' called ? 

            person = { first: "john", last: "davison" }
            p person[:first]
            first_names = person.keep_if {|key, value| key == :first}

            #is the above even useful ? 
          </code></pre>
        </ol>
      </div>
    </div>

    <%# <div class="row"> %>
    <%#   <div class=" large-11 large-centered columns content"> %>
    <%#     <ol> %>
    <%#       <li>CREATE a data model.</li> %>
    <%#       <pre><code> %>
    <%#       </code></pre> %>
    <%#       <blockquote> %>
    <%#       </blockquote> %>
    <%#       <%= image_tag "https://dl.dropboxusercontent.com/u/12834645/railstutor/lessons/" %1> %>
    <%#     </ol> %>
    <%#   </div> %>
    <%# </div> %>
  </div>
</div>

<%# contemplate the difference between 'indexed' arrays and unsorted hashes %>
<%# build and manipulate nested arrays, hashes %>
  
<%#   ### EXERCISES FOR REPETITION %>

<%#   * create a method that does something to a string, add a string to an array, call the method you just made on that string, look what a regular expression is, try using .match() on the string (will get beer points). %>
<%#   * create a method that accepts a string, make sure the string has characters like %,$,#,@ in it, return the same string with any special characters removed.(very useful for internet forms...) %>
<%#   - build a method that accepts as an argument, an array that looks like [1, [2], {three: "3"}] and returns [ Integer, Array, Hash ] %>
<%#   - build a method that accepts an array that looks like [["john", "the cook"], ["mike", "the builder"], ["sally", "the coder"]] and returns {{first: "john", job: "the cook"}, {first: "mike", job: "the builder"}, { first: "sally", job: "the coder"}} %>
<%#   - build a method, create an array that looks something like [1,2,3,4,5,6,7,8,9] that returns [[2,4,6,8], [1,3,5,7,9]], way extra points, create rspec tests that ensure this behaves as written. %>
<%#   - go find a piece of data related to something you want to build a prototype around, put that data into a data form that makes sense, ie, string, hash, array, integer, whatever, create a method that manipulates that piece of data in a way that enhances its value to you and potentialy to someone you might communicate it too, present your method to the group, explaining how it works and how you think the method adds value to the data. (this is not trivial, it shows how just programming alone doesn't add value, value relates to context....) %>



<%#   ### FOOD FOR THOUGHT %>

<%#   * CRUD means create read update and destroy, it represents the fundamental nature of what MVC based software on the internet does.  Think about all the different steps involved in this page and what step they refer to, are they creating, modify, reading or destroying data? %>  
